{
	"info": {
		"_postman_id": "985cf6ca-00ac-42f1-ab63-35e0b17f559d",
		"name": "MyApp Tests",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "37693055"
	},
	"item": [
		{
			"name": "AUTH",
			"item": [
				{
					"name": "Register – success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"201 Created\", () => pm.response.to.have.status(201));",
									"let js = pm.response.json();",
									"pm.environment.set(\"username\", \"testuser\");",
									"pm.environment.set(\"email\",    \"testuser@example.com\");",
									"pm.environment.set(\"password\", \"P@ssw0rd\");",
									"pm.environment.set(\"access_token\", js.access_token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{username}}\",\n  \"email\":    \"{{email}}\",\n  \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Register – conflict",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"409 Conflict\", () => pm.response.to.have.status(409));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{username}}\",\n  \"email\":    \"{{email}}\",\n  \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/auth/register",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login – wrong creds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 Unauthorized\", () => pm.response.to.have.status(401));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"wrong\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login – success",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 OK\", () => pm.response.to.have.status(200));",
									"const body = pm.response.json();",
									"pm.environment.set(\"access_token\", body.access_token);",
									"",
									"(() => {",
									"    const parts = body.access_token.split('.');",
									"    if (parts.length !== 3) return;",
									"    const payload = JSON.parse(atob(parts[1]));",
									"    const uid = payload.sub || payload.user_id;",
									"    pm.environment.set(\"user_id\", uid);",
									"})();"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh – rotate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 OK\", () => pm.response.to.have.status(200));",
									"let js = pm.response.json();",
									"pm.environment.set(\"access_token\", js.access_token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/auth/refresh",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Logout",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"204 No Content\", () => pm.response.to.have.status(204));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/auth/logout",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"logout"
							]
						}
					},
					"response": []
				},
				{
					"name": "Refresh – no cookie",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"401 Missing token\", () => pm.response.to.have.status(401));"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/auth/refresh",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"refresh"
							]
						}
					},
					"response": []
				},
				{
					"name": "Login – success before events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"200 OK\", () => pm.response.to.have.status(200));",
									"let js = pm.response.json();",
									"pm.environment.set(\"access_token\", js.access_token);"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"username\": \"{{username}}\",\n  \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{base_url}}/api/auth/login",
							"host": [
								"{{base_url}}"
							],
							"path": [
								"api",
								"auth",
								"login"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Events",
			"item": [
				{
					"name": "CRUD",
					"item": [
						{
							"name": "Create Event – success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 Created\", () => pm.response.to.have.status(201));",
											"pm.environment.set(\"event_id\", pm.response.json().id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Team meeting\",\n  \"description\": \"Weekly sync-up\",\n  \"start_time\": \"2025-06-01T14:00:00Z\",\n  \"end_time\": \"2025-06-01T15:00:00Z\",\n  \"location\": \"Zoom\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/events",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Event – missing title",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"422 Validation error\", () => pm.response.to.have.status(422));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"description\": \"No title\",\n  \"start_time\": \"2025-06-01T14:00:00Z\",\n  \"end_time\": \"2025-06-01T15:00:00Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/events",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Event – end before start",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"422 Time validation\", () => pm.response.to.have.status(422));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Bad times\",\n  \"start_time\": \"2025-06-01T15:00:00Z\",\n  \"end_time\": \"2025-06-01T14:00:00Z\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/events",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Event – recurring",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 Created\", () => pm.response.to.have.status(201));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Daily Standup\",\n  \"start_time\": \"2025-06-02T09:00:00Z\",\n  \"end_time\": \"2025-06-02T09:15:00Z\",\n  \"is_recurring\": true,\n  \"recurrence_pattern\": \"RRULE:FREQ=DAILY;INTERVAL=1\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/events",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Event – invalid recurrence_pattern",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"422 Unprocessable Entity for invalid recurrence_pattern\", () => {",
											"    pm.response.to.have.status(422);",
											"});",
											"",
											"const detail = pm.response.json().detail;",
											"pm.test(\"Detail is an array with one error\", () => {",
											"    pm.expect(Array.isArray(detail)).to.be.true;",
											"    pm.expect(detail.length).to.eql(1);",
											"});",
											"",
											"const err = detail[0];",
											"pm.test(\"Error loc is body.recurrence_pattern\", () => {",
											"    pm.expect(err.loc).to.eql([\"body\",\"recurrence_pattern\"]);",
											"});",
											"",
											"pm.test(\"Error type is invalid_rrule\", () => {",
											"    pm.expect(err.type).to.eql(\"invalid_rrule\");",
											"});",
											"",
											"pm.test(\"Error message is correct\", () => {",
											"    pm.expect(err.msg).to.eql(\"recurrence_pattern must be a valid RRULE string\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Bad RRULE\",\n  \"start_time\": \"2025-06-10T10:00:00Z\",\n  \"end_time\":   \"2025-06-10T11:00:00Z\",\n  \"is_recurring\": true,\n  \"recurrence_pattern\": \"NOT_A_VALID_RRULE\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/events",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "Batch Create – all valid",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 Created\", () => pm.response.to.have.status(201));",
											"pm.test(\"2 items\", () => pm.response.json().length === 2);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"events\": [\n    {\n      \"title\": \"Batch1\",\n      \"start_time\": \"2025-06-03T10:00:00Z\",\n      \"end_time\": \"2025-06-03T11:00:00Z\"\n    },\n    {\n      \"title\": \"Batch2\",\n      \"start_time\": \"2025-06-04T10:00:00Z\",\n      \"end_time\": \"2025-06-04T11:00:00Z\"\n    }\n  ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/events/batch",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events",
										"batch"
									]
								}
							},
							"response": []
						},
						{
							"name": "Batch Create – rollback on error",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"422 Unprocessable\", () => pm.response.to.have.status(422));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"events\": [\n    {\n      \"title\": \"OK\",\n      \"start_time\": \"2025-06-05T10:00:00Z\",\n      \"end_time\": \"2025-06-05T11:00:00Z\"\n    },\n    {\n      \"title\": \"Bad\",\n      \"start_time\": \"2025-06-06T12:00:00Z\",\n      \"end_time\": \"2025-06-06T11:00:00Z\"\n    }\n  ]\n}\n",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/events/batch",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events",
										"batch"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Events - success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", () => pm.response.to.have.status(200));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/events?skip=0&limit=10",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Get One – success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", () => pm.response.to.have.status(200));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/events/{{event_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Get One – not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"404 Not Found\", () => pm.response.to.have.status(404));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/events/00000000-0000-0000-0000-000000000000",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events",
										"00000000-0000-0000-0000-000000000000"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update One - success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", () => pm.response.to.have.status(200));",
											"pm.test(\"Title changed\", () => pm.response.json().title === \"Updated Title\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \"title\": \"Updated Title\" }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/events/{{event_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete One – success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"204 No Content\", () => pm.response.to.have.status(204));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/events/{{event_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete One – repeat delete → 404",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"404 Not Found\", () => pm.response.to.have.status(404));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/events/{{event_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Permissions",
					"item": [
						{
							"name": "Register 2 – success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 Created\", () => pm.response.to.have.status(201));",
											"const body = pm.response.json();",
											"pm.environment.set(\"other_token\", body.access_token);",
											"if (body.access_token) {",
											"    const parts = body.access_token.split('.');",
											"    if (parts.length === 3) {",
											"        const payload = JSON.parse(atob(parts[1]));",
											"        const uid = payload.sub || payload.user_id;",
											"        pm.environment.set(\"other_user_id\", uid);",
											"    }",
											"}"
										],
										"type": "text/javascript",
										"packages": {}
									}
								},
								{
									"listen": "prerequest",
									"script": {
										"exec": [
											"const rand = Math.random().toString(36).substring(2, 8);",
											"pm.environment.set(\"other_email\", `user2_${rand}@example.com`);",
											"pm.environment.set(\"other_username\", `user2_${rand}`);",
											"pm.environment.set(\"other_password\", \"Password123!\");"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"username\": \"{{other_username}}\",\n  \"email\":    \"{{other_email}}\",\n  \"password\": \"{{other_password}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/auth/register",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"auth",
										"register"
									]
								}
							},
							"response": []
						},
						{
							"name": "Create Event 2 – success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"201 Created\", () => pm.response.to.have.status(201));",
											"pm.environment.set(\"event_id\", pm.response.json().id);"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Team meeting\",\n  \"description\": \"Weekly sync-up\",\n  \"start_time\": \"2025-06-01T14:00:00Z\",\n  \"end_time\": \"2025-06-01T15:00:00Z\",\n  \"location\": \"Zoom\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/events",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Permissions – success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Returns array\", () => {",
											"    const arr = pm.response.json();",
											"    pm.expect(Array.isArray(arr)).to.be.true;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/events/{{event_id}}/permissions",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}",
										"permissions"
									]
								}
							},
							"response": []
						},
						{
							"name": "One – forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"403 Forbidden for non-member\", () => {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{other_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/events/{{event_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update One - forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"403 Forbidden when non-member requests event\", () => {",
											"    pm.response.to.have.status(403);",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{other_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{ \"title\": \"Updated Title\" }",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/events/{{event_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Delete One – forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"403 Forbidden when non-owner deletes event\", () => {",
											"    pm.response.to.have.status(403);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{other_token}}",
											"type": "string"
										}
									]
								},
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/events/{{event_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "List Events – no access",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"200 OK\", () => pm.response.to.have.status(200));",
											"const arr = pm.response.json();",
											"pm.test(\"No events returned for outsider\", () => {",
											"    pm.expect(Array.isArray(arr)).to.be.true;",
											"    pm.expect(arr).to.be.empty;",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{other_token}}",
											"type": "string"
										}
									]
								},
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/events?skip=0&limit=10",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events"
									],
									"query": [
										{
											"key": "skip",
											"value": "0"
										},
										{
											"key": "limit",
											"value": "10"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Permission – success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", () => pm.response.to.have.status(201));",
											"const body = pm.response.json();",
											"pm.test(\"One permission created\", () => {",
											"    pm.expect(body).to.be.an(\"array\").with.lengthOf(1);",
											"});",
											"pm.test(\"Correct user & role\", () => {",
											"    pm.expect(body[0].user_id).to.eql(pm.variables.get(\"other_user_id\"));",
											"    pm.expect(body[0].role).to.eql(\"Editor\");",
											"});",
											""
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"user_id\": \"{{other_user_id}}\",\n    \"role\": \"Editor\"\n  }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/events/{{event_id}}/share",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}",
										"share"
									]
								}
							},
							"response": []
						},
						{
							"name": "Add Permission – conflict",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 409 on duplicate\", () => {",
											"    pm.response.to.have.status(409);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "[\n  {\n    \"user_id\": \"{{other_user_id}}\",\n    \"role\": \"Editor\"\n  }\n]",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/events/{{event_id}}/share",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}",
										"share"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Permission – success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", () => pm.response.to.have.status(200));",
											"const p = pm.response.json();",
											"pm.test(\"Role updated\", () => pm.expect(p.role).to.eql(\"Viewer\"));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"role\": \"Viewer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/events/{{event_id}}/permissions/{{other_user_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}",
										"permissions",
										"{{other_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update Permission – forbidden",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 403\", () => pm.response.to.have.status(403));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{other_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"role\": \"Viewer\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/events/{{event_id}}/permissions/{{user_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}",
										"permissions",
										"{{user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Permission – success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 204\", () => pm.response.to.have.status(204));",
											"",
											"pm.sendRequest({",
											"  url: pm.environment.get(\"base_url\")",
											"    + \"/api/events/\" + pm.variables.get(\"event_id\")",
											"    + \"/permissions\",",
											"  method: 'GET',",
											"  header: {",
											"    'Authorization': 'Bearer ' + pm.variables.get(\"owner_token\")",
											"  }",
											"}, (err, res) => {",
											"  const body = res.json();",
											"  const list = Array.isArray(body) ? body : body.permissions || [];",
											"",
											"  pm.test(\"User removed from permissions\", () => {",
											"    pm.expect(list.some(p => p.user_id === pm.variables.get(\"other_user_id\"))).to.be.false;",
											"  });",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/events/{{event_id}}/permissions/{{other_user_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}",
										"permissions",
										"{{other_user_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Remove Permission – not found",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 404\", () => pm.response.to.have.status(404));"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "DELETE",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/events/{{event_id}}/permissions/{{other_user_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}",
										"permissions",
										"{{other_user_id}}"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Versioning",
					"item": [
						{
							"name": "Create Event 3 – success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 201\", function () {",
											"    pm.response.to.have.status(201);",
											"});",
											"pm.test(\"Event created\", function () {",
											"    var json = pm.response.json();",
											"    pm.environment.set(\"event_id\", json.id);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Test Event\",\n  \"description\": \"Description\",\n  \"start_time\": \"2024-05-23T10:00:00+00:00\",\n  \"end_time\": \"2024-05-23T12:00:00+00:00\",\n  \"location\": \"Room 101\",\n  \"is_recurring\": false,\n  \"recurrence_pattern\": null\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/events",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update One 2 - success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Test Event v2\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/events/{{event_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Event History (Changelog)",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"History has more than 1 version\", function () {",
											"    var json = pm.response.json();",
											"    pm.expect(json.length).to.be.above(0);",
											"    pm.environment.set(\"history_version_id\", json[0].id);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/events/{{event_id}}/history",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}",
										"history"
									]
								}
							},
							"response": []
						},
						{
							"name": "Specific Version",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"History version correct\", function () {",
											"    var json = pm.response.json();",
											"    pm.expect(json.id).to.eql(pm.environment.get(\"history_version_id\"));",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/events/{{event_id}}/history/{{history_version_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}",
										"history",
										"{{history_version_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Update One 3 - success",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"auth": {
									"type": "bearer",
									"bearer": [
										{
											"key": "token",
											"value": "{{access_token}}",
											"type": "string"
										}
									]
								},
								"method": "PUT",
								"header": [],
								"body": {
									"mode": "raw",
									"raw": "{\n  \"title\": \"Test Event v3\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{base_url}}/api/events/{{event_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Event History (Changelog) 2",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"History has more than 1 version\", function () {",
											"    var json = pm.response.json();",
											"    pm.expect(json.length).to.be.above(0);",
											"    pm.environment.set(\"history_version_id2\", json[json.length-1].id); ",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/events/{{event_id}}/history",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}",
										"history"
									]
								}
							},
							"response": []
						},
						{
							"name": "Diff Between Versions",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Diff is returned\", function () {",
											"    var json = pm.response.json();",
											"    pm.expect(json).to.be.an('object');",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/events/{{event_id}}/diff/{{history_version_id}}/{{history_version_id2}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}",
										"diff",
										"{{history_version_id}}",
										"{{history_version_id2}}"
									]
								}
							},
							"response": []
						},
						{
							"name": "Rollback",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"pm.test(\"Event rolled back\", function () {",
											"    var json = pm.response.json();",
											"    pm.expect(json).to.have.property(\"id\");",
											"});"
										],
										"type": "text/javascript",
										"packages": {}
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [],
								"url": {
									"raw": "{{base_url}}/api/events/{{event_id}}/rollback/{{history_version_id}}",
									"host": [
										"{{base_url}}"
									],
									"path": [
										"api",
										"events",
										"{{event_id}}",
										"rollback",
										"{{history_version_id}}"
									]
								}
							},
							"response": []
						}
					]
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							"if (!pm.environment.get(\"access_token\")) {",
							"  throw new Error(\"No access_token: do Login – success first\");",
							"}",
							"pm.request.headers.upsert({",
							"  key: \"Authorization\",",
							"  value: \"Bearer \" + pm.environment.get(\"access_token\")",
							"});"
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"packages": {},
						"exec": [
							""
						]
					}
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"packages": {},
				"exec": [
					""
				]
			}
		}
	]
}