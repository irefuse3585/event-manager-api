import uuid

from sqlalchemy import Boolean
from sqlalchemy import Enum as SAEnum
from sqlalchemy import String
from sqlalchemy.dialects.postgresql import UUID as PG_UUID
from sqlalchemy.orm import Mapped, mapped_column, relationship

from app.db.base import Base
from app.models.enums import UserRole


class User(Base):
    """
    ORM model for application users.
    """

    __tablename__ = "users"

    # Primary key: autogenerated UUID
    id: Mapped[uuid.UUID] = mapped_column(
        PG_UUID(as_uuid=True), primary_key=True, default=uuid.uuid4
    )

    # Unique username for login
    username: Mapped[str] = mapped_column(
        String(50), unique=True, nullable=False, index=True
    )

    # Unique email address
    email: Mapped[str] = mapped_column(
        String(255), unique=True, nullable=False, index=True
    )

    # Hashed password (bcrypt)
    hashed_password: Mapped[str] = mapped_column(String(128), nullable=False)

    # Active flag: can the user log in
    is_active: Mapped[bool] = mapped_column(Boolean, nullable=False, default=True)

    # Global role: Admin, User, etc.
    role: Mapped[UserRole] = mapped_column(
        SAEnum(
            UserRole,
            name="user_role",
            native_enum=False,
        ),
        nullable=False,
        default=UserRole.USER,
    )

    # Relationship: one user â†’ many events
    events = relationship("Event", back_populates="owner", cascade="all, delete-orphan")

    # Relationship: many-to-many via Permission table
    permissions = relationship(
        "Permission", back_populates="user", cascade="all, delete-orphan"
    )

    # Relationship: history records created by this user
    histories = relationship(
        "History", back_populates="changed_by_user", cascade="all, delete-orphan"
    )
