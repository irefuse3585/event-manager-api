import uuid

from sqlalchemy import Boolean, Column, Enum, String
from sqlalchemy.dialects.postgresql import UUID
from sqlalchemy.orm import relationship

from app.db.base import Base
from app.models.enums import UserRole  # см. ниже определение Enum


class User(Base):
    """
    ORM model for application users.
    """

    __tablename__ = "users"

    # Primary key: autogenerated UUID
    id = Column(UUID(as_uuid=True), primary_key=True, default=uuid.uuid4)

    # Unique username for login
    username = Column(String(length=50), unique=True, nullable=False, index=True)

    # Unique email address
    email = Column(String(length=255), unique=True, nullable=False, index=True)

    # Hashed password (bcrypt)
    hashed_password = Column(String(length=128), nullable=False)

    # Active flag: can the user log in
    is_active = Column(Boolean, nullable=False, default=True)

    # Global role: Admin, User, etc.
    role = Column(Enum(UserRole), nullable=False, default=UserRole.USER)

    # Relationship: one user → many events
    events = relationship("Event", back_populates="owner", cascade="all, delete-orphan")

    # Relationship: many-to-many via Permission table
    permissions = relationship(
        "Permission", back_populates="user", cascade="all, delete-orphan"
    )

    # Relationship: history records created by this user
    histories = relationship(
        "History", back_populates="changed_by_user", cascade="all, delete-orphan"
    )
